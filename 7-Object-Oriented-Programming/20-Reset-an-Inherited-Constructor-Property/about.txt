info from challenge page
#####################
#####################
#####################
Object Oriented Programming: Reset an Inherited Constructor Property
When an object inherits its prototype from another object, it also inherits the
supertype's constructor property.

Here's an example:

function Bird() { }
Bird.prototype = Object.create(Animal.prototype);
let duck = new Bird();
duck.constructor // function Animal(){...}
But duck and all instances of Bird should show that they were constructed by Bird and not
Animal. To do so, you can manually set Bird's constructor property to the Bird object:

Bird.prototype.constructor = Bird;
duck.constructor // function Bird(){...}

Fix the code so duck.constructor and beagle.constructor return their respective constructors.

Bird.prototype should be an instance of Animal.
duck.constructor should return Bird.
Dog.prototype should be an instance of Animal.
beagle.constructor should return Dog.

#####################
#####################
#####################
original location of challenge
URL
https://learn.freecodecamp.org/javascript-algorithms-and-data-structures/object-oriented-programming/reset-an-inherited-constructor-property
#####################
#####################
#####################
below is the original code that comes along with this challenge
CODE

function Animal() { }
function Bird() { }
function Dog() { }

Bird.prototype = Object.create(Animal.prototype);
Dog.prototype = Object.create(Animal.prototype);

// Add your code below this line



let duck = new Bird();
let beagle = new Dog();
