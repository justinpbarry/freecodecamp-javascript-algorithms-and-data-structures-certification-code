00-Introduction-to-the-Object-Oriented-Programming-Challenges
01-Create-a-Basic-JavaScript-Object
02-Use-Dot-Notation-to-Access-the-Properties-of-an-Object
03-Create-a-Method-on-an-Object
04-Make-Code-More-Reusable-with-the-this-Keyword
05-Define-a-Constructor-Function
06-Use-a-Constructor-to-Create-Objects
07-Extend-Constructors-to-Receive-Arguments
08-Verify-an-Object's-Constructor-with-instanceof
09-Understand-Own-Properties
10-Use-Prototype-Properties-to-Reduce-Duplicate-Code
11-Iterate-Over-All-Properties
12-Understand-the-Constructor-Property
13-Change-the-Prototype-to-a-New-Object
14-Remember-to-Set-the-Constructor-Property-when-Changing-the-Prototype
15-Understand-Where-an-Objectâ€™s-Prototype-Comes-From
16-Understand-the-Prototype-Chain
17-Use-Inheritance-So-You-Don't-Repeat-Yourself
18-Inherit-Behaviors-from-a-Supertype
19-Set-the-Child's-Prototype-to-an-Instance-of-the-Parent
20-Reset-an-Inherited-Constructor-Property
21-Add-Methods-After-Inheritance
22-Override-Inherited-Methods
23-Use-a-Mixin-to-Add-Common-Behavior-Between-Unrelated-Objects
24-Use-Closure-to-Protect-Properties-Within-an-Object-from-Being-Modified-Externally
25-Understand-the-Immediately-Invoked-Function-Expression-(IIFE)
26-Use-an-IIFE-to-Create-a-Module
